(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[194],{IhiS:function(module,exports,__webpack_require__){"use strict";var url=__webpack_require__("CxY0");var gitHosts=__webpack_require__("hWh8");var GitHost=module.exports=__webpack_require__("fiWv");var protocolToRepresentationMap={"git+ssh":"sshurl","git+https":"https",ssh:"sshurl",git:"git"};function protocolToRepresentation(protocol){if(protocol.substr(-1)===":")protocol=protocol.slice(0,-1);return protocolToRepresentationMap[protocol]||protocol}var authProtocols={"git:":true,"https:":true,"git+https:":true,"http:":true,"git+http:":true};module.exports.fromUrl=function(giturl){if(giturl==null||giturl==="")return;var url=fixupUnqualifiedGist(isGitHubShorthand(giturl)?"github:"+giturl:giturl);var parsed=parseGitUrl(url);var matches=Object.keys(gitHosts).map(function(gitHostName){var gitHostInfo=gitHosts[gitHostName];var auth=null;if(parsed.auth&&authProtocols[parsed.protocol]){auth=decodeURIComponent(parsed.auth)}var committish=parsed.hash?decodeURIComponent(parsed.hash.substr(1)):null;var user=null;var project=null;var defaultRepresentation=null;if(parsed.protocol===gitHostName+":"){user=decodeURIComponent(parsed.host);project=parsed.path&&decodeURIComponent(parsed.path.replace(/^[/](.*?)(?:[.]git)?$/,"$1"));defaultRepresentation="shortcut"}else{if(parsed.host!==gitHostInfo.domain)return;if(!gitHostInfo.protocols_re.test(parsed.protocol))return;var pathmatch=gitHostInfo.pathmatch;var matched=parsed.path.match(pathmatch);if(!matched)return;if(matched[1]!=null)user=decodeURIComponent(matched[1]);if(matched[2]!=null)project=decodeURIComponent(matched[2]);defaultRepresentation=protocolToRepresentation(parsed.protocol)}return new GitHost(gitHostName,user,auth,project,committish,defaultRepresentation)}).filter(function(gitHostInfo){return gitHostInfo});if(matches.length!==1)return;return matches[0]};function isGitHubShorthand(arg){return/^[^:@%/\s.-][^:@%/\s]*[/][^:@\s/%]+(?:#.*)?$/.test(arg)}function fixupUnqualifiedGist(giturl){var parsed=url.parse(giturl);if(parsed.protocol==="gist:"&&parsed.host&&!parsed.path){return parsed.protocol+"/"+parsed.host}else{return giturl}}function parseGitUrl(giturl){if(typeof giturl!=="string")giturl=""+giturl;var matched=giturl.match(/^([^@]+)@([^:]+):[/]?((?:[^/]+[/])?[^/]+?)(?:[.]git)?(#.*)?$/);if(!matched)return url.parse(giturl);return{protocol:"git+ssh:",slashes:true,auth:matched[1],host:matched[2],port:null,hostname:matched[2],hash:matched[4],search:null,query:null,pathname:"/"+matched[3],path:"/"+matched[3],href:"git+ssh://"+matched[1]+"@"+matched[2]+"/"+matched[3]+(matched[4]||"")}}},fiWv:function(module,exports,__webpack_require__){"use strict";var gitHosts=__webpack_require__("hWh8");var GitHost=module.exports=function(type,user,auth,project,committish,defaultRepresentation){var gitHostInfo=this;gitHostInfo.type=type;Object.keys(gitHosts[type]).forEach(function(key){gitHostInfo[key]=gitHosts[type][key]});gitHostInfo.user=user;gitHostInfo.auth=auth;gitHostInfo.project=project;gitHostInfo.committish=committish;gitHostInfo.default=defaultRepresentation};GitHost.prototype={};GitHost.prototype.hash=function(){return this.committish?"#"+this.committish:""};GitHost.prototype._fill=function(template,vars){if(!template)return;if(!vars)vars={};var self=this;Object.keys(this).forEach(function(key){if(self[key]!=null&&vars[key]==null)vars[key]=self[key]});var rawAuth=vars.auth;var rawComittish=vars.committish;Object.keys(vars).forEach(function(key){vars[key]=encodeURIComponent(vars[key])});vars["auth@"]=rawAuth?rawAuth+"@":"";vars["#committish"]=rawComittish?"#"+rawComittish:"";vars["/tree/committish"]=vars.committish?"/"+vars.treepath+"/"+vars.committish:"";vars["/committish"]=vars.committish?"/"+vars.committish:"";vars.committish=vars.committish||"master";var res=template;Object.keys(vars).forEach(function(key){res=res.replace(new RegExp("[{]"+key+"[}]","g"),vars[key])});return res};GitHost.prototype.ssh=function(){return this._fill(this.sshtemplate)};GitHost.prototype.sshurl=function(){return this._fill(this.sshurltemplate)};GitHost.prototype.browse=function(){return this._fill(this.browsetemplate)};GitHost.prototype.docs=function(){return this._fill(this.docstemplate)};GitHost.prototype.bugs=function(){return this._fill(this.bugstemplate)};GitHost.prototype.https=function(){return this._fill(this.httpstemplate)};GitHost.prototype.git=function(){return this._fill(this.gittemplate)};GitHost.prototype.shortcut=function(){return this._fill(this.shortcuttemplate)};GitHost.prototype.path=function(){return this._fill(this.pathtemplate)};GitHost.prototype.file=function(P){return this._fill(this.filetemplate,{path:P.replace(/^[/]+/g,"")})};GitHost.prototype.getDefaultRepresentation=function(){return this.default};GitHost.prototype.toString=function(){return(this[this.default]||this.sshurl).call(this)}},hWh8:function(module,exports,__webpack_require__){"use strict";var gitHosts=module.exports={github:{protocols:["git","http","git+ssh","git+https","ssh","https"],domain:"github.com",treepath:"tree",filetemplate:"https://{auth@}raw.githubusercontent.com/{user}/{project}/{committish}/{path}",bugstemplate:"https://{domain}/{user}/{project}/issues",gittemplate:"git://{auth@}{domain}/{user}/{project}.git{#committish}"},bitbucket:{protocols:["git+ssh","git+https","ssh","https"],domain:"bitbucket.org",treepath:"src"},gitlab:{protocols:["git+ssh","git+https","ssh","https"],domain:"gitlab.com",treepath:"tree",docstemplate:"https://{domain}/{user}/{project}{/tree/committish}#README",bugstemplate:"https://{domain}/{user}/{project}/issues"},gist:{protocols:["git","git+ssh","git+https","ssh","https"],domain:"gist.github.com",pathmatch:/^[/](?:([^/]+)[/])?([a-z0-9]+)(?:[.]git)?$/,filetemplate:"https://gist.githubusercontent.com/{user}/{project}/raw{/committish}/{path}",bugstemplate:"https://{domain}/{project}",gittemplate:"git://{domain}/{project}.git{#committish}",sshtemplate:"git@{domain}:/{project}.git{#committish}",sshurltemplate:"git+ssh://git@{domain}/{project}.git{#committish}",browsetemplate:"https://{domain}/{project}{/committish}",docstemplate:"https://{domain}/{project}{/committish}",httpstemplate:"git+https://{domain}/{project}.git{#committish}",shortcuttemplate:"{type}:{project}{#committish}",pathtemplate:"{project}{#committish}"}};var gitHostDefaults={sshtemplate:"git@{domain}:{user}/{project}.git{#committish}",sshurltemplate:"git+ssh://git@{domain}/{user}/{project}.git{#committish}",browsetemplate:"https://{domain}/{user}/{project}{/tree/committish}",docstemplate:"https://{domain}/{user}/{project}{/tree/committish}#readme",httpstemplate:"git+https://{auth@}{domain}/{user}/{project}.git{#committish}",filetemplate:"https://{domain}/{user}/{project}/raw/{committish}/{path}",shortcuttemplate:"{type}:{user}/{project}{#committish}",pathtemplate:"{user}/{project}{#committish}",pathmatch:/^[/]([^/]+)[/]([^/]+?)(?:[.]git)?$/};Object.keys(gitHosts).forEach(function(name){Object.keys(gitHostDefaults).forEach(function(key){if(gitHosts[name][key])return;gitHosts[name][key]=gitHostDefaults[key]});gitHosts[name].protocols_re=RegExp("^("+gitHosts[name].protocols.map(function(protocol){return protocol.replace(/([\\+*{}()\[\]$^|])/g,"\\$1")}).join("|")+"):$")})}}]);