(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[183],{HYh9:function(module,exports,__webpack_require__){var path=__webpack_require__("33yf");module.exports={createFromFile:function(filePath){var fname=path.basename(filePath);var dir=path.dirname(filePath);return this.create(fname,dir)},create:function(cacheId,_path){var fs=__webpack_require__("Po9p");var flatCache=__webpack_require__("pBnG");var cache=flatCache.load(cacheId,_path);var assign=__webpack_require__("MgzW");var normalizedEntries={};var removeNotFoundFiles=function removeNotFoundFiles(){const cachedEntries=cache.keys();cachedEntries.forEach(function remover(fPath){try{fs.statSync(fPath)}catch(err){if(err.code==="ENOENT"){cache.removeKey(fPath)}}})};removeNotFoundFiles();return{cache:cache,hasFileChanged:function(file){return this.getFileDescriptor(file).changed},analyzeFiles:function(files){var me=this;files=files||[];var res={changedFiles:[],notFoundFiles:[],notChangedFiles:[]};me.normalizeEntries(files).forEach(function(entry){if(entry.changed){res.changedFiles.push(entry.key);return}if(entry.notFound){res.notFoundFiles.push(entry.key);return}res.notChangedFiles.push(entry.key)});return res},getFileDescriptor:function(file){var meta=cache.getKey(file);var cacheExists=!!meta;var fstat;var me=this;try{fstat=fs.statSync(file)}catch(ex){me.removeEntry(file);return{key:file,notFound:true,err:ex}}var cSize=fstat.size;var cTime=fstat.mtime.getTime();if(!meta){meta={size:cSize,mtime:cTime}}else{var isDifferentDate=cTime!==meta.mtime;var isDifferentSize=cSize!==meta.size}var nEntry=normalizedEntries[file]={key:file,changed:!cacheExists||isDifferentDate||isDifferentSize,meta:meta};return nEntry},getUpdatedFiles:function(files){var me=this;files=files||[];return me.normalizeEntries(files).filter(function(entry){return entry.changed}).map(function(entry){return entry.key})},normalizeEntries:function(files){files=files||[];var me=this;var nEntries=files.map(function(file){return me.getFileDescriptor(file)});return nEntries},removeEntry:function(entryName){delete normalizedEntries[entryName];cache.removeKey(entryName)},deleteCacheFile:function(){cache.removeCacheFile()},destroy:function(){normalizedEntries={};cache.destroy()},reconcile:function(){removeNotFoundFiles();var entries=normalizedEntries;var keys=Object.keys(entries);if(keys.length===0){return}keys.forEach(function(entryName){var cacheEntry=entries[entryName];try{var stat=fs.statSync(cacheEntry.key);var meta=assign(cacheEntry.meta,{size:stat.size,mtime:stat.mtime.getTime()});cache.setKey(entryName,meta)}catch(err){if(err.code!=="ENOENT"){throw err}}});cache.save(true)}}}}}}]);