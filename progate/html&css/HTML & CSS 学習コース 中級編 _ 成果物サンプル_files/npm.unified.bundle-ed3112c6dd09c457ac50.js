(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[80],{"1VtT":function(module,exports,__webpack_require__){"use strict";var extend=__webpack_require__("6dBs");var bail=__webpack_require__("Gdbo");var vfile=__webpack_require__("Esvb");var trough=__webpack_require__("xkQk");var string=__webpack_require__("IRYA");var func=__webpack_require__("Im0n");var plain=__webpack_require__("NkL+");module.exports=unified().freeze();var slice=[].slice;var own={}.hasOwnProperty;var pipeline=trough().use(pipelineParse).use(pipelineRun).use(pipelineStringify);function pipelineParse(p,ctx){ctx.tree=p.parse(ctx.file)}function pipelineRun(p,ctx,next){p.run(ctx.tree,ctx.file,done);function done(err,tree,file){if(err){next(err)}else{ctx.tree=tree;ctx.file=file;next()}}}function pipelineStringify(p,ctx){ctx.file.contents=p.stringify(ctx.tree,ctx.file)}function unified(){var attachers=[];var transformers=trough();var namespace={};var frozen=false;var freezeIndex=-1;processor.data=data;processor.freeze=freeze;processor.attachers=attachers;processor.use=use;processor.parse=parse;processor.stringify=stringify;processor.run=run;processor.runSync=runSync;processor.process=process;processor.processSync=processSync;return processor;function processor(){var destination=unified();var length=attachers.length;var index=-1;while(++index<length){destination.use.apply(null,attachers[index])}destination.data(extend(true,{},namespace));return destination}function freeze(){var values;var plugin;var options;var transformer;if(frozen){return processor}while(++freezeIndex<attachers.length){values=attachers[freezeIndex];plugin=values[0];options=values[1];transformer=null;if(options===false){continue}if(options===true){values[1]=undefined}transformer=plugin.apply(processor,values.slice(1));if(func(transformer)){transformers.use(transformer)}}frozen=true;freezeIndex=Infinity;return processor}function data(key,value){if(string(key)){if(arguments.length===2){assertUnfrozen("data",frozen);namespace[key]=value;return processor}return own.call(namespace,key)&&namespace[key]||null}if(key){assertUnfrozen("data",frozen);namespace=key;return processor}return namespace}function use(value){var settings;assertUnfrozen("use",frozen);if(value===null||value===undefined){}else if(func(value)){addPlugin.apply(null,arguments)}else if(typeof value==="object"){if("length"in value){addList(value)}else{addPreset(value)}}else{throw new Error("Expected usable value, not `"+value+"`")}if(settings){namespace.settings=extend(namespace.settings||{},settings)}return processor;function addPreset(result){addList(result.plugins);if(result.settings){settings=extend(settings||{},result.settings)}}function add(value){if(func(value)){addPlugin(value)}else if(typeof value==="object"){if("length"in value){addPlugin.apply(null,value)}else{addPreset(value)}}else{throw new Error("Expected usable value, not `"+value+"`")}}function addList(plugins){var length;var index;if(plugins===null||plugins===undefined){}else if(typeof plugins==="object"&&"length"in plugins){length=plugins.length;index=-1;while(++index<length){add(plugins[index])}}else{throw new Error("Expected a list of plugins, not `"+plugins+"`")}}function addPlugin(plugin,value){var entry=find(plugin);if(entry){if(plain(entry[1])&&plain(value)){value=extend(entry[1],value)}entry[1]=value}else{attachers.push(slice.call(arguments))}}}function find(plugin){var length=attachers.length;var index=-1;var entry;while(++index<length){entry=attachers[index];if(entry[0]===plugin){return entry}}}function parse(doc){var file=vfile(doc);var Parser;freeze();Parser=processor.Parser;assertParser("parse",Parser);if(newable(Parser)){return new Parser(String(file),file).parse()}return Parser(String(file),file)}function run(node,file,cb){assertNode(node);freeze();if(!cb&&func(file)){cb=file;file=null}if(!cb){return new Promise(executor)}executor(null,cb);function executor(resolve,reject){transformers.run(node,vfile(file),done);function done(err,tree,file){tree=tree||node;if(err){reject(err)}else if(resolve){resolve(tree)}else{cb(null,tree,file)}}}}function runSync(node,file){var complete=false;var result;run(node,file,done);assertDone("runSync","run",complete);return result;function done(err,tree){complete=true;bail(err);result=tree}}function stringify(node,doc){var file=vfile(doc);var Compiler;freeze();Compiler=processor.Compiler;assertCompiler("stringify",Compiler);assertNode(node);if(newable(Compiler)){return new Compiler(node,file).compile()}return Compiler(node,file)}function process(doc,cb){freeze();assertParser("process",processor.Parser);assertCompiler("process",processor.Compiler);if(!cb){return new Promise(executor)}executor(null,cb);function executor(resolve,reject){var file=vfile(doc);pipeline.run(processor,{file:file},done);function done(err){if(err){reject(err)}else if(resolve){resolve(file)}else{cb(null,file)}}}}function processSync(doc){var complete=false;var file;freeze();assertParser("processSync",processor.Parser);assertCompiler("processSync",processor.Compiler);file=vfile(doc);process(file,done);assertDone("processSync","process",complete);return file;function done(err){complete=true;bail(err)}}}function newable(value){return func(value)&&keys(value.prototype)}function keys(value){var key;for(key in value){return true}return false}function assertParser(name,Parser){if(!func(Parser)){throw new Error("Cannot `"+name+"` without `Parser`")}}function assertCompiler(name,Compiler){if(!func(Compiler)){throw new Error("Cannot `"+name+"` without `Compiler`")}}function assertUnfrozen(name,frozen){if(frozen){throw new Error("Cannot invoke `"+name+"` on a frozen processor.\n"+"Create a new processor first, by invoking it: "+"use `processor()` instead of `processor`.")}}function assertNode(node){if(!node||!string(node.type)){throw new Error("Expected node, got `"+node+"`")}}function assertDone(name,asyncName,complete){if(!complete){throw new Error("`"+name+"` finished async. Use `"+asyncName+"` instead")}}}}]);